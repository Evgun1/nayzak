version: "3.5"
services:

    kafka-controller-1:
        image: apache/kafka:latest
        container_name: kafka-controller-1
        environment:
          KAFKA_CLUSTER_ID: "hnfvgbjmfvcgbhndcgbfvhgbjmkbjmkhn"
          KAFKA_NODE_ID: 1
          KAFKA_PROCESS_ROLES: controller
          KAFKA_LISTENERS: CONTROLLER://:9093
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093
        networks:
            - nayzak
        volumes:
          - ./services/kafka-controllers:/kafka-controller-1/var/lib/kafka/data
        restart: unless-stopped
    kafka-controller-2:
        image: apache/kafka:latest
        container_name: kafka-controller-2
        environment:
          KAFKA_CLUSTER_ID: "afhEJTTTTTTJjasrjJphjSADAHl"
          KAFKA_NODE_ID: 2
          KAFKA_PROCESS_ROLES: controller
          KAFKA_LISTENERS: CONTROLLER://:9093
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093
        networks:
            - nayzak
        volumes:
          - ./services/kafka-controllers:/kafka-controller-2/var/lib/kafka/data
        restart: unless-stopped
    kafka-broker-1:
        image: apache/kafka:latest
        container_name: kafka-broker-1
        ports:
          - 19001:9092
        environment:
          KAFKA_CLUSTER_ID: "jmlkxcvZojmklsfvadcomkplsdcfvgaz"
          KAFKA_NODE_ID: 3
          KAFKA_PROCESS_ROLES: broker
          KAFKA_LISTENERS: 'PLAINTEXT://:19900,PLAINTEXT_HOST://:9092'
          KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-1:19900,PLAINTEXT_HOST://localhost:19001'
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        depends_on:
          - kafka-controller-1
          - kafka-controller-2
        networks:
            - nayzak
        volumes:
            - ./services/kafka-brokers:/kafka-broker-1/var/lib/kafka/data
        restart: unless-stopped
    kafka-broker-2:
        image: apache/kafka:latest
        container_name: kafka-broker-2
        ports:
          - 19002:9092
        environment:
          KAFKA_CLUSTER_ID: "asdasdfrhwrhaetjadgjfahsdatheaheVCS"
          KAFKA_NODE_ID: 4
          KAFKA_PROCESS_ROLES: broker
          KAFKA_LISTENERS: 'PLAINTEXT://:19900,PLAINTEXT_HOST://:9092'
          KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-2:19900,PLAINTEXT_HOST://localhost:19002'
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        depends_on:
          - kafka-controller-1
          - kafka-controller-2
        networks:
            - nayzak
        volumes:
            - ./services/kafka-brokers:/kafka-broker-2/var/lib/kafka/data
        restart: unless-stopped
    kafka-ui:
        container_name: kafka-ui
        image: provectuslabs/kafka-ui:latest
        ports:
          - 8081:8080
        environment:
          DYNAMIC_CONFIG_ENABLED: 'true'
        networks:
            - nayzak
        depends_on:
            - kafka-broker-1
            - kafka-broker-2

        restart: unless-stopped
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "8080:8080"
            # - "443:443"
        volumes:
            - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
            # - ./nginx:/etc/nginx/conf.d
            # - ./certs:/etc/ssl/certs
            # - ./certs/private:/etc/ssl/private
        networks:
            - nayzak
        restart: unless-stopped
    postgres:
        container_name: postgres
        image: postgres:16-alpine
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            PGDATA: /data/postgres
        volumes:
            - ./services/postgres:/var/lib/postgresql/data
        ports:
            - "11054:5432"
        networks:
            - nayzak
        restart: unless-stopped
    pg-admin:
        container_name: pg-admin
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        ports:
            - "11055:80"
        networks:
            - nayzak
        restart: unless-stopped
        user: "${UID}:${GID}"
    mongo:
        container_name: mongo
        # image: mongo
        image: mongo:noble
        restart: unless-stopped
        ports:
            - "12020:27017"
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
            MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
        networks:
            - nayzak
        # command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
        # entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
        volumes:
            - ./services/mongo:/var/lib/mongo/data
    mongo-express:
        container_name: mongo-express
        image: mongo-express
        restart: unless-stopped
        ports:
            - "12022:8081"
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
            ME_CONFIG_MONGODB_SERVER: mongo
            ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
            ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
        networks:
            - nayzak
        depends_on:
            - mongo
    redis:
        image: redis:7.2
        container_name: redis
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            REDIS_DATABASES: ${REDIS_DATABASES}
        ports:
            - "11053:6379"
        volumes:
            - ./services/redis:/var/lib/redis/data
        command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
        networks:
            - nayzak
        restart: unless-stopped



networks:
    nayzak:
        driver: bridge



