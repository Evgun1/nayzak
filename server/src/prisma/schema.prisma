generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Categories {
    id          Int             @id @default(autoincrement())
    title       String          @db.VarChar(255)
    Products    Products[]
    Subcategory Subcategories[]
}

model Subcategories {
    id           Int         @id @default(autoincrement())
    title        String      @db.VarChar(255)
    Products     Products[]
    Categories   Categories? @relation(fields: [categoriesId], references: [id])
    categoriesId Int
}

model Brands {
    id       Int        @id @default(autoincrement())
    title    String     @db.VarChar(255)
    Products Products[]
}

enum ProductsStatus {
    outOfStock
    inStock
    discontinued
}

model Products {
    id              Int            @id @default(autoincrement())
    title           String         @db.VarChar(255)
    description     String
    price           Int
    discount        Int
    mainPrice       Int
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    status          ProductsStatus @default(inStock)
    Cart            Cart[]
    Orders          Orders[]
    Reviews         Reviews[]
    Wishlist        Wishlist[]
    Categories      Categories     @relation(fields: [categoriesId], references: [id])
    categoriesId    Int
    Subcategories   Subcategories  @relation(fields: [subcategoriesId], references: [id])
    subcategoriesId Int
    Brands          Brands?        @relation(fields: [brandsId], references: [id])
    brandsId        Int?
    Media           Media?         @relation(fields: [mediaId], references: [id])
    mediaId         Int?
}

model Cart {
    id          Int       @id @default(autoincrement())
    amount      Int
    Customers   Customers @relation(fields: [customersId], references: [id])
    customersId Int
    Products    Products  @relation(fields: [productsId], references: [id])
    productsId  Int
}

model Wishlist {
    id          Int       @id @default(autoincrement())
    Customers   Customers @relation(fields: [customersId], references: [id])
    customersId Int
    Products    Products  @relation(fields: [productsId], references: [id])
    productsId  Int
}

enum Role {
    admin
    client
}

model Credentials {
    id             Int      @id @default(autoincrement())
    email          String   @unique @db.Text
    password       String   @db.Text
    role           Role     @default(client)
    isActive       Boolean  @default(false)
    activationLink String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    Customers Customers[]
}

model Reviews {
    id          Int       @id @default(autoincrement())
    rating      Int       @default(0)
    text        String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Customers   Customers @relation(fields: [customersId], references: [id])
    customersId Int
    Products    Products  @relation(fields: [productsId], references: [id])
    productsId  Int
}

enum OrdersStatus {
    pending
    processing
    shipped
}

model Orders {
    id          Int          @id @default(autoincrement())
    amount      Int
    price       Int
    status      OrdersStatus @default(pending)
    Customers   Customers    @relation(fields: [customersId], references: [id])
    customersId Int
    Products    Products?    @relation(fields: [productsId], references: [id])
    productsId  Int
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    Addresses   Addresses    @relation(fields: [addressesId], references: [id])
    addressesId Int
}

model Customers {
    id            Int         @id @default(autoincrement())
    firstName     String      @db.Text
    lastName      String      @db.Text
    phone         Int         @db.Integer
    Addresses     Addresses[]
    Orders        Orders[]
    Reviews       Reviews[]
    Cart          Cart[]
    Wishlist      Wishlist[]
    Credentials   Credentials @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
    credentialsId Int         @unique
    Media         Media?      @relation(fields: [mediaId], references: [id])
    mediaId       Int?
}

model Addresses {
    id         Int    @id @default(autoincrement())
    city       String @db.Text
    street     String @db.Text
    postalCode Int    @db.Integer

    Customers   Customers @relation(fields: [customersId], references: [id])
    customersId Int
    Orders      Orders[]
}

model Media {
    id          Int         @id @default(autoincrement())
    name        String      @db.Text
    src         String      @db.Text
    description String      @db.Text
    Products    Products[]
    Customers   Customers[]
}
